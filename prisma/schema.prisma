datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      Int           @id @default(autoincrement())
  email                   String        @unique
  passwordHash            String
  username                String
  isVerified              Boolean       @default(false)
  verificationToken       String?       @unique // Token for email verification
  verificationTokenExpiry DateTime? // Expiry date of the verification token
  magicLinkToken          String?       @unique
  magicLinkExpiry         DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  orders                  Order[]
  oauths                  OAuth[]
  customRequests          CustomOrder[]
  admin                   Admin?        @relation(fields: [adminId], references: [id])
  adminId                 Int?
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  password  String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  userId      Int
  packageId   Int?
  status      String // Pending, Paid, Ongoing, Delivered, Rejected
  totalPrice  Decimal
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  package     Package?     @relation(fields: [packageId], references: [id])
  customOrder CustomOrder?
  Payment     Payment?
}

model Package {
  id          Int     @id @default(autoincrement())
  name        String // Compro, Olshop, atau Custom
  type        String
  price       Decimal
  description String?
  orders      Order[]
}

model CustomOrder {
  id           Int      @id @default(autoincrement())
  userId       Int?
  User         User?    @relation(fields: [userId], references: [id])
  orderId      Int      @unique
  order        Order    @relation(fields: [orderId], references: [id])
  websiteType  String // Jenis website yang diinginkan
  details      String // Deskripsi kebutuhan website dari customer
  message      String? // Pesan tambahan dari admin
  adminNotes   String?
  pageCount    Int
  requirements String?
  price        Float? // Harga yang ditetapkan admin
  status       String // Pending, Reviewed, Waiting Payment, Completed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  paymentMethod String
  amount        Decimal
  status        String
  paymentDate   DateTime @default(now())
  order         Order    @relation(fields: [orderId], references: [id])
}

model OAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  providerId String
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
}
